from enum import Enum

from langchain_core.messages import AIMessage
from langchain_core.prompts import PipelinePromptTemplate, PromptTemplate
from pydantic import BaseModel, Field
from typing import List, Dict, Optional

from models.llm_output import ToponymSearchArguments, ValidatedOutput


# enum of the possible phases of the reflective candidate generation
class ReflectionPhase(str, Enum):
    INITIAL_ACTOR_GENERATION = "initial_actor_generation"
    CRITIC_GENERATION_FOR_FATAL_ERRORS = "critic_generation_for_fatal_errors"
    CRITIC_GENERATION_FOR_INVALID_TOPONYMS = "critic_generation_for_invalid_toponyms"
    ACTOR_RETRY_AFTER_FATAL_ERROR = "actor_retry_after_fatal_error"
    ACTOR_RETRY_ON_INVALID_TOPONYMS = "actor_retry_on_invalid_toponyms"
    FATAL_ERRORS_NOT_SOLVED = "fatal_errors_not_solved"


class ToponymWithCandidates(BaseModel):
    toponym_with_search_arguments: ToponymSearchArguments = Field(description="The toponym and search arguments")
    total_results: int = Field(
        description="Total number of results  from the GeoNames API matching the search arguments",
        default=0)
    candidates: List[Dict] = Field(description="List of candidates retrieved from the GeoNames API",
                                   default=[])
    nof_retrieved_candidates: int = Field(description="Number of candidates retrieved from the GeoNames API",
                                          default=0)


class CandidateGenerationOutput(ValidatedOutput):
    toponyms_with_candidates: List[ToponymWithCandidates] = Field(description="List of toponyms with candidates",
                                                                  default=[])


class CandidateGenerationState(CandidateGenerationOutput):
    article_title: str = Field(description="The title of the article",
                               default="")
    article_text: str = Field(description="The text of the article",
                              default="")
    initial_prompt: str = Field(description="The prompt used to generate the output",
                                default=None)
    reflection_phase: ReflectionPhase = Field(description="The phase of the reflective candidate generation",
                                              default=ReflectionPhase.INITIAL_ACTOR_GENERATION)
    critic_prompt: str = Field(description="The prompt used to generate the critic output",
                               default=None)
    critic_feedback: AIMessage = Field(description="The output (feedback) generated by the critic",
                                       default=None)
    reflected_prompt: str = Field(
        description="The prompt containing actionable feedback by the critic",
        default=None)
